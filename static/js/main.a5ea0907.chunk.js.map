{"version":3,"sources":["Component/ContactForm/ContactForm.module.css","Component/ContactsListItem/ContactListItem.module.css","Component/Filter/Filter.module.css","Component/ContactList/ContactList.module.css","Component/Container/Container.module.css","Component/ContactForm/ContactForm.jsx","Component/ContactsListItem/ContactSListItem.jsx","Component/ContactList/ContactList.jsx","Component/Container/Container.jsx","Component/Filter/Filter.jsx","Component/hooks/useLocaleStorage.jsx","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","contacts","useState","name","setName","number","setNumber","handleInputChange","e","target","value","contactExits","find","contact","toUpperCase","className","styles","forma","preventDefault","alert","blockform","htmlFor","LabelForm","NamesForm","type","pattern","title","required","onChange","ButtonsContact","ContactListItem","id","onClick","NumberContacts","ContactList","ContactsDelete","s","map","Container","children","Filter","useLocaleStorage","key","defaultContacts","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","setContacts","filter","setFilter","userInfo","generateId","normalizedFilter","toLowerCase","includes","getFilterContact","contactId","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5ea0907.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockform\":\"ContactForm_blockform__2de8r\",\"LabelForm\":\"ContactForm_LabelForm__1VmYW\",\"NamesForm\":\"ContactForm_NamesForm__k980L\",\"ButtonsContact\":\"ContactForm_ButtonsContact__-xMiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContact\":\"ContactListItem_ButtonsContact__1eVPx\",\"NumberContacts\":\"ContactListItem_NumberContacts__2gq-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LabelForm\":\"Filter_LabelForm__2GHdS\",\"NamesForm\":\"Filter_NamesForm__HUDT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__1059v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3kSg-\"};","import {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../ContactForm/ContactForm.module.css'\r\n\r\nconst ContactForm = ({onSubmit, contacts}) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\nconst handleInputChange = e => {\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value)\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value)\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    \r\n\r\nconst handleSubmit = e => {\r\n    e.preventDefault();\r\n    if(contactExits()){\r\n        alert(`${name} is already in contacts`)\r\n        return;\r\n    }\r\n    onSubmit({name, number});\r\n    setName('');\r\n    setNumber('');\r\n    };\r\n    \r\n    const contactExits = () => contacts.find(contact => contact.name.toUpperCase() === name.toUpperCase() || contact.number === number);\r\n\r\n    return(\r\n        <form className={styles.forma} onSubmit={handleSubmit}>\r\n            <div className={styles.blockform}>\r\n            <label htmlFor=\"\" className={styles.LabelForm}>\r\n                <span className={styles.NamesForm}>Name</span>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    />\r\n            </label>\r\n                \r\n                <label className={styles.LabelForm}>\r\n                <span className={styles.NamesForm}>Number</span>\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleInputChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\" className={styles.ButtonsContact}>Add contact</button>\r\n        </form>\r\n    );\r\n  }\r\n\r\n  ContactForm.propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n        contacts: PropTypes.array.isRequired,\r\n    }\r\n\r\nexport default ContactForm;","import PropTypes from 'prop-types'\nimport styles from './ContactListItem.module.css'\n\nconst ContactListItem = ({id,name,number,onClick}) => {\n    return(\n        <>\n        <span className={styles.NumberContacts}>\n            {name}: {number}\n        </span>\n        <button className={styles.ButtonsContact} type=\"button\" onClick={() => onClick(id)}>\n            Delete\n        </button>\n        </>\n    );\n}\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default ContactListItem","import PropTypes from 'prop-types'\nimport ContactListItem from '../ContactsListItem/ContactSListItem'\nimport s from './ContactList.module.css'\n\n\nconst ContactList = ({contacts, ContactsDelete}) => {\n    return(\n        <ul className={s.ContactList}>\n        {contacts.map(({id, name, number}) => (\n        <li key={id}>\n            <ContactListItem\n                id={id}\n                name={name}\n                number={number}\n                onClick={ContactsDelete}\n            />\n        </li>          \n    ))}\n    </ul>\n    )\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n};\n\nexport default ContactList","import PropTypes from 'prop-types'\nimport s from './Container.module.css'\n\nconst Container = ({children}) => {\n    return <div className={s.Container}>\n        {children}\n    </div>\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nexport default Container","import PropTypes from 'prop-types'\nimport styles from './Filter.module.css'\n\nconst Filter = ({value, onChange}) => {\n    return(\n        <label className={styles.LabelForm}>\n            <span className={styles.NamesForm}>Find contacts by name</span>\n            <input type=\"text\"\n                   name=\"filter\"\n                   value={value}\n                   onChange={onChange} \n            />\n        </label>\n    );\n}\n\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default Filter","import { useState, useEffect } from 'react';\r\n\r\nconst useLocaleStorage = (key, defaultContacts) => {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultContacts;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n  return [state, setState];\r\n}\r\n\r\nexport default useLocaleStorage; ","import { useState } from 'react';\nimport { v4 as generateId } from 'uuid';\nimport ContactForm from './Component/ContactForm/ContactForm';\nimport ContactList from './Component/ContactList/ContactList';\nimport Container from './Component/Container/Container';\nimport Filter from './Component/Filter/Filter';\nimport useLocaleStorage from './Component/hooks/useLocaleStorage';\n\nconst App = () => {\n  const [contacts, setContacts] = useLocaleStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\nconst handleFormSubmit = userInfo => \n  setContacts([...contacts, {\n    id: generateId(),\n    ...userInfo,\n   }\n ]\n)\n\nconst handleFilterChange = e => setFilter(e.target.value);\n\nconst getFilterContact = () => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({name}) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n}\n\nconst handleContactDelete = contactId => {\nsetContacts(prev => prev.filter(({id}) => id !== contactId))\n}\n\n   return(\n     <Container>\n     <h1>Phonebook</h1>\n    <ContactForm\n    onSubmit = {handleFormSubmit}\n    contacts = {[...contacts]}\n    />\n\n    <h2>Contacts</h2>\n    <Filter value={filter} onChange={handleFilterChange}/>\n    <ContactList \n    contacts={getFilterContact()} \n    ContactsDelete={handleContactDelete}/>\n    </Container>\n   );\n }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}